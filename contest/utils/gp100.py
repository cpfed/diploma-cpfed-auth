__gp100 = {
    1: 100,
    2: 70.6,
    3: 57.5,
    4: 49.7,
    5: 44.3,
    6: 40.3,
    7: 37.1,
    8: 34.6,
    9: 32.5,
    10: 30.7,
    11: 29.1,
    12: 27.7,
    13: 26.5,
    14: 25.4,
    15: 24.4,
    16: 23.5,
    17: 22.6,
    18: 21.8,
    19: 21.1,
    20: 20.4,
    21: 19.8,
    22: 19.2,
    23: 18.6,
    24: 18.1,
    25: 17.6,
    26: 17.1,
    27: 16.6,
    28: 16.1,
    29: 15.7,
    30: 15.3,
    31: 14.9,
    32: 14.5,
    33: 14.2,
    34: 13.8,
    35: 13.5,
    36: 13.1,
    37: 12.8,
    38: 12.5,
    39: 12.2,
    40: 11.9,
    41: 11.6,
    42: 11.3,
    43: 11,
    44: 10.7,
    45: 10.5,
    46: 10.2,
    47: 9.9,
    48: 9.7,
    49: 9.4,
    50: 9.2,
    51: 9,
    52: 8.7,
    53: 8.5,
    54: 8.3,
    55: 8,
    56: 7.8,
    57: 7.6,
    58: 7.4,
    59: 7.2,
    60: 7,
    61: 6.8,
    62: 6.6,
    63: 6.3,
    64: 6.2,
    65: 6,
    66: 5.8,
    67: 5.6,
    68: 5.4,
    69: 5.2,
    70: 5,
    71: 4.8,
    72: 4.6,
    73: 4.5,
    74: 4.3,
    75: 4.1,
    76: 3.9,
    77: 3.7,
    78: 3.6,
    79: 3.4,
    80: 3.2,
    81: 3.1,
    82: 2.9,
    83: 2.7,
    84: 2.6,
    85: 2.4,
    86: 2.2,
    87: 2.1,
    88: 1.9,
    89: 1.7,
    90: 1.6,
    91: 1.4,
    92: 1.3,
    93: 1.1,
    94: 1,
    95: 0.8,
    96: 0.7,
    97: 0.5,
    98: 0.4,
    99: 0.2,
    100: 0.1
}


def estimate_point_gp100(rank: int, solved_cnt: int, max_solved_cnt: int, participants_cnt: int) -> float:
    return (100 * (solved_cnt / max(1, max_solved_cnt)) * (participants_cnt - 1) / (participants_cnt + rank - 2)
            + __gp100.get(rank, 0))
